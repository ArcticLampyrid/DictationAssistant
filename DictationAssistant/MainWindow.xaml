<Window x:Class="DictationAssistant.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
        xmlns:local="clr-namespace:DictationAssistant"
        xmlns:c="clr-namespace:CalcBinding;assembly=CalcBinding"
        mc:Ignorable="d"
        Title="自动默写" Height="600" Width="800" Icon="DictationAssistant.ico" Closed="Window_Closed"
        AllowDrop="True" Drop="Window_Drop">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Icons.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <local:ExpressionBasedWaitingTimeValueConverter x:Key="ExpressionBasedWaitingTimeValueConverter"/>
        </ResourceDictionary>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="New" Executed="OnNewExecuted" />
        <CommandBinding Command="Open" Executed="OnOpenExecuted" />
        <CommandBinding Command="Save" Executed="OnSaveExecuted" />
    </Window.CommandBindings>
    <DockPanel>
        <Menu DockPanel.Dock="Top" Background="White">
            <MenuItem Header="文件(_F)">
                <MenuItem Header="新建(_N)..." Command="New"/>
                <MenuItem Header="打开(_O)..." Command="Open"/>
                <MenuItem Header="保存(_S)..." Command="Save"/>
                <Separator />
                <MenuItem Header="退出(_E)" Name="ExitMenuItem" Click="ExitMenuItem_Click"/>
            </MenuItem>
            <MenuItem Header="编辑(_E)">
                <MenuItem Header="{Binding ElementName=ShowOrHideWordlist, Path=Content}" Click="ShowOrHideWordlist_Click"/>
                <Separator />
                <MenuItem Command="Cut" CommandTarget="{Binding TextArea, ElementName=WordlistEditor}"/>
                <MenuItem Command="Copy" CommandTarget="{Binding TextArea, ElementName=WordlistEditor}"/>
                <MenuItem Command="Paste" CommandTarget="{Binding TextArea, ElementName=WordlistEditor}"/>
                <Separator />
                <MenuItem Command="Undo" CommandTarget="{Binding TextArea, ElementName=WordlistEditor}"/>
                <MenuItem Command="Redo" CommandTarget="{Binding TextArea, ElementName=WordlistEditor}"/>
                <Separator />
                <MenuItem Command="SelectAll" CommandTarget="{Binding TextArea, ElementName=WordlistEditor}"/>
            </MenuItem>
            <MenuItem Header="选项(_O)">
                <MenuItem Header="偏好设置(_P)" Name="PreferenceMenu" Click="PreferenceMenu_Click"/>
                <Separator />
                <MenuItem Header="自动翻页" IsCheckable="True" IsChecked="True" Name="ScrollLockMenu"/>
                <MenuItem Header="高亮跟随" IsCheckable="True" IsChecked="True" Name="HighlightSpeakingLineMenu"/>
                </MenuItem>
            <MenuItem Header="辅助(_A)">
                <MenuItem Header="保存音频" Name="SaveAudioMenu" Click="SaveAudioMenu_Click"/>
            </MenuItem>
            <MenuItem Header="帮助(_H)">
                <MenuItem Header="关于(_A)" Name="AboutMenu" Click="AboutMenu_Click"/>
            </MenuItem>
        </Menu>
        <DockPanel DockPanel.Dock="Right" Width="264">
            <GroupBox x:Name="ControlerStatus" Header="播报信息" DockPanel.Dock="Top" d:DataContext="{d:DesignInstance {x:Type local:SpeakControler}}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label HorizontalAlignment="Center" FontSize="22" FontWeight="Bold" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                        <Label.Content>
                            <TextBlock Text="{Binding ElapsedTimes, FallbackValue=0, Mode=OneWay, StringFormat=本词语播报次数：{0}}" />
                        </Label.Content>
                    </Label>
                    <Label Content="自动播报间隔/秒：" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center" FontSize="14"/>
                    <TextBox Grid.Row="1" Grid.Column="1" TextAlignment="Right" VerticalAlignment="Center" FontSize="14" >
                        <TextBox.Text>
                            <Binding Path="CurrentWaitingTimeCalculator" Converter="{StaticResource ExpressionBasedWaitingTimeValueConverter}" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <local:ExpressionBasedWaitingTimeValidationRule />
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                    <Label Content="自动播报次数/词：" Grid.Row="2" Grid.Column="0" VerticalAlignment="Center" FontSize="14"/>
                    <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding AutoMode_TimesPerWord, UpdateSourceTrigger=PropertyChanged}" TextAlignment="Right" VerticalAlignment="Center" FontSize="14"/>
                    <Label HorizontalAlignment="Center" FontSize="22" FontWeight="Bold" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2">
                        <Label.Style>
                            <Style TargetType="Label">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsPausedAutoMode}" Value="True">
                                        <Setter Property="Content" Value="自动播报已暂停" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsSpeaking}" Value="True">
                                        <Setter Property="Content">
                                            <Setter.Value>
                                                <TextBlock Text="{Binding NextWordIndex, StringFormat=正在播报第{0}个}" />
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding AutoMode}" Value="True" />
                                            <Condition Binding="{Binding IsPausedAutoMode}" Value="False" />
                                            <Condition Binding="{Binding IsSpeaking}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <MultiDataTrigger.Setters>
                                            <Setter Property="Content" Value="{c:Binding '&quot;即将播报第&quot; + ((ElapsedTimes >= AutoMode_TimesPerWord) ? (NextWordIndex + 1) : NextWordIndex).ToString() + &quot;个&quot;'}" />
                                        </MultiDataTrigger.Setters>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding AutoMode}" Value="False" />
                                            <Condition Binding="{Binding IsSpeaking}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <MultiDataTrigger.Setters>
                                            <Setter Property="Content" Value="等待播报" />
                                        </MultiDataTrigger.Setters>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Label.Style>
                    </Label>
                </Grid>
            </GroupBox>
            <Button DockPanel.Dock="Bottom" Name="ShowOrHideWordlist" Click="ShowOrHideWordlist_Click" Padding="4" Margin="4">
                <Button.Style>
                    <Style TargetType="Button">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding SelectedIndex, ElementName=WordlistTab}" Value="0">
                                <Setter Property="Content" Value="隐藏词语列表(_W)" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding SelectedIndex, ElementName=WordlistTab}" Value="1">
                                <Setter Property="Content" Value="显示词语列表(_W)" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <GroupBox Header="引擎设置" DockPanel.Dock="Bottom" Name="VoiceSettingGroupBox">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Label Content="音量：" Grid.Row="0" Grid.Column="0" Margin="4" VerticalAlignment="Center"/>
                    <Slider Grid.Row="0" Grid.Column="1" Margin="4" Minimum="0" Maximum="100" TickFrequency="5" TickPlacement="Both" Value="{Binding Volume, Mode=OneWayToSource, FallbackValue=100}"/>
                    <Label Content="语速：" Grid.Row="1" Grid.Column="0" Margin="4" VerticalAlignment="Center"/>
                    <Slider Grid.Row="1" Grid.Column="1" Margin="4" Minimum="-10" Maximum="10" TickFrequency="1" TickPlacement="Both" Value="{Binding Rate, Mode=OneWayToSource}"/>
                    <Label Content="引擎：" Grid.Row="2" Grid.Column="0" Margin="4" VerticalAlignment="Center"/>
                    <Grid Grid.Row="2" Grid.Column="1" Margin="4">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <ComboBox Name="VoiceComboxBox" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" SelectedItem="{Binding BaseVoice, Mode=TwoWay}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <Label Content="{Binding Culture.ThreeLetterWindowsLanguageName}" Background="#CC808080" Padding="0" Margin="2,0" Foreground="White" FontFamily="Consolas" VerticalContentAlignment="Center" />
                                        <Label Content="{Binding Name}" Padding="0" Margin="2,0" />
                                    </StackPanel>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                        <Button Content="中文引擎" Grid.Row="1" Grid.Column="0" x:Name="SwitchToChineseVoice" Click="SwitchToChineseVoice_Click"/>
                        <Button Content="英文引擎" Grid.Row="1" Grid.Column="1" x:Name="SwitchToEnglishVoice" Click="SwitchToEnglishVoice_Click"/>
                    </Grid>
                </Grid>
            </GroupBox>
            <GroupBox Header="播报控制">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="2*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Button x:Name="StartSpeakingButton" Content="开始播报(_S)" Grid.Row="0" Grid.Column="0" Margin="4" Click="StartSpeakingButton_Click"/>
                    <Button x:Name="StopSpeakingButton" Content="停止播报(_D)" Grid.Row="0" Grid.Column="1" Margin="4" Click="StopSpeakingButton_Click"/>
                    <Button x:Name="PauseSpeakingButton" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="4" FontSize="24" FontWeight="Bold" d:DataContext="{d:DesignInstance {x:Type local:SpeakControler}}" Click="PauseSpeakingButton_Click">
                        <Button.Style>
                            <Style TargetType="Button">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsPausedAutoMode}" Value="False">
                                        <Setter Property="Content" Value="暂停自动播报(_P)" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsPausedAutoMode}" Value="True">
                                        <Setter Property="Content" Value="恢复自动播报(_R)" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button x:Name="SpeakNextButton" Content="报下一个(_N)" Grid.Row="2" Grid.Column="0" Margin="4" Click="SpeakNextButton_Click"/>
                    <Button x:Name="ResetRecordButton" Content="记录归零(_C)" Grid.Row="2" Grid.Column="1" Margin="4" Click="ResetRecordButton_Click"/>
                    <Button x:Name="SpeakButton" Content="再报一遍(_M)" Grid.Row="3" Grid.Column="0" Margin="4" Click="SpeakButton_Click"/>
                    <Button x:Name="SpeakPreviousButton" Content="报上一个(_L)" Grid.Row="3" Grid.Column="1" Margin="4" Click="SpeakPreviousButton_Click"/>
                </Grid>
            </GroupBox>
        </DockPanel>
        <GroupBox Header="词语列表" >
            <TabControl BorderThickness="0" Name="WordlistTab">
                <TabItem Visibility="Collapsed">
                    <DockPanel>
                        <ToolBarTray Orientation="Vertical" DockPanel.Dock="Right" Margin="8,0,0,0">
                            <ToolBar ToolBarTray.IsLocked="True">
                                <ToolBar.ItemContainerStyle>
                                    <Style TargetType="Button">
                                        <Setter Property="Width" Value="24"/>
                                        <Setter Property="Height" Value="34"/>
                                    </Style>
                                </ToolBar.ItemContainerStyle>
                                <Button Command="Open">
                                    <Image Source="{StaticResource Icon_Open}" />
                                </Button>
                                <Button Command="Save">
                                    <Image Source="{StaticResource Icon_Save}" />
                                </Button>
                                <Button Command="Cut" CommandTarget="{Binding TextArea, ElementName=WordlistEditor}">
                                    <Image Source="{StaticResource Icon_Cut}" />
                                </Button>
                                <Button Command="Copy" CommandTarget="{Binding TextArea, ElementName=WordlistEditor}">
                                    <Image Source="{StaticResource Icon_Copy}" />
                                </Button>
                                <Button Command="Paste" CommandTarget="{Binding TextArea, ElementName=WordlistEditor}">
                                    <Image Source="{StaticResource Icon_Paste}" />
                                </Button>
                                <Button Command="Delete" CommandTarget="{Binding TextArea, ElementName=WordlistEditor}">
                                    <Image Source="{StaticResource Icon_Delete}" />
                                </Button>
                                <Button Command="New">
                                    <Image Source="{StaticResource Icon_Clear}" />
                                </Button>
                                <Button x:Name="CountButton" Click="CountButton_Click">
                                    <Image Source="{StaticResource Icon_Count}" />
                                </Button>
                            </ToolBar>
                        </ToolBarTray>
                        <avalonEdit:TextEditor Name="WordlistEditor" FontSize="28" ShowLineNumbers="True" FlowDirection="LeftToRight" MouseDown="WordlistEditor_MouseDown">
                            <avalonEdit:TextEditor.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="读选定词语" Name="SpeakSelectionMenu" Click="SpeakSelectionMenu_Click"/>
                                    <MenuItem Header="在Bing词典中查看" Name="ViewSelectionInBingDictionaryMenu" Click="ViewSelectionInBingDictionaryMenu_Click"/>
                                    <MenuItem Header="从此处开始自动播报" Name="StartFromSelectionMenu" Click="StartFromSelectionMenu_Click"/>
                                    <Separator />
                                    <MenuItem Command="Cut" />
                                    <MenuItem Command="Copy" />
                                    <MenuItem Command="Paste" />
                                    <Separator />
                                    <MenuItem Command="Undo" />
                                    <MenuItem Command="Redo" />
                                    <Separator />
                                    <MenuItem Command="SelectAll" />
                                </ContextMenu>
                            </avalonEdit:TextEditor.ContextMenu>
                        </avalonEdit:TextEditor>
                    </DockPanel>
                </TabItem>
                <TabItem Visibility="Collapsed">
                    <Label VerticalContentAlignment="Center" HorizontalContentAlignment="Center" FontSize="24" FontWeight="Bold" Content="Hidden"/>
                </TabItem>
            </TabControl>
        </GroupBox>
    </DockPanel>
</Window>
